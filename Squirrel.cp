// Squirrel.cp#include "Squirrel.h"#include <string.h>#include <assert.h>static char* CopyString(const char* oldStr) {	int n = strlen(oldStr) + 1;	char* newStr = new char[n];	assert(newStr != NULL);	strcpy(newStr, oldStr);	return newStr;}static void FreeString(char* str) {	if (str != NULL) delete [] str;}Squirrel::Squirrel(const char* aName, int aNervousness) {	nervousness = aNervousness;	name = CopyString(aName);}Squirrel::~Squirrel() {	FreeString(name);}	void Squirrel::PrintInfo() const {	cout << name;	cout << ' ';	cout << nervousness;	cout << '\n';}	double Squirrel::TreeProbability() const {	return ((nervousness - 1) / 99.0);}	int Squirrel::GetNervousness() const {	return nervousness;}void Squirrel::SetNervousness(int newNervousness) {	nervousness =  newNervousness < Min_Nervousness ? Min_Nervousness 				: Max_Nervousness < newNervousness ? Max_Nervousness 				: newNervousness;}	void Squirrel::Tree() {	cout << name;	cout << " Tree!";	cout << '\n';	SetNervousness(GetNervousness() + Inc_Nervousness);}void Squirrel::Food() {	cout << name;	cout << " Food!";	cout << '\n';	SetNervousness(GetNervousness() - Inc_Nervousness);	if (TreeProbability() >= Tree_Threshold) Tree();}